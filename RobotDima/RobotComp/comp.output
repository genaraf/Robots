Terminals unused in grammar

   ILLEGAL


Grammar

    0 $accept: program $end

    1 program: stms
    2        | stms END

    3 stms: stm
    4     | stms stm

    5 stm: decl
    6    | oper
    7    | error SM
    8    | error ENDIF
    9    | error ENDWHILE

   10 decl: type defs SM

   11 type: TYPE

   12 defs: def
   13     | defs CM def

   14 def: NAME
   15    | NAME LBR expr RBR

   16 oper: assign
   17     | if
   18     | while
   19     | BREAK SM
   20     | CONTINUE SM
   21     | input
   22     | output
   23     | outputln
   24     | rc
   25     | forward
   26     | back
   27     | right
   28     | left
   29     | sleep
   30     | dima
   31     | sound
   32     | mouth
   33     | stop

   34 assign: lval ASG expr SM

   35 lval: lval_name
   36     | lval_name LBR expr RBR

   37 lval_name: NAME

   38 expr: expr PLUS expr
   39     | expr MINUS expr
   40     | expr MUL expr
   41     | expr DIV expr
   42     | expr MOD expr
   43     | MINUS expr
   44     | NAME
   45     | NAME LBR expr RBR
   46     | INT_CONST
   47     | DOUBLE_CONST
   48     | STRING_CONST
   49     | LPAR expr RPAR

   50 if: ifh stms ENDIF

   51 $@1: %empty

   52 if: ifh stms $@1 else ENDIF

   53 $@2: %empty

   54 if: ifh stms $@2 elseifs ENDIF

   55 ifh: IF LPAR lexpr RPAR

   56 elseifs: elseiflist
   57        | elseiflist else

   58 elseiflist: elseif
   59           | elseiflist elseif

   60 else: ELSE stms

   61 elseif: elseifh stms

   62 elseifh: ELSEIF LPAR lexpr RPAR

   63 lexpr: expr RELOP expr
   64      | lexpr LOR lexpr
   65      | lexpr LAND lexpr
   66      | LNOT lexpr
   67      | LPAR lexpr RPAR

   68 while: whileh stms ENDWHILE

   69 whileh: WHILE LPAR lexpr RPAR

   70 input: INPUT inputlst SM

   71 inputlst: lval
   72         | inputlst CM lval

   73 output: OUTPUT outputlst SM

   74 rc: RC LPAR expr CM expr RPAR SM

   75 back: BACK SM

   76 forward: FORWARD SM

   77 right: RIGHT SM

   78 left: LEFT SM

   79 dima: DIMA SM

   80 sleep: SLEEP LPAR expr RPAR SM
   81      | SLEEP LPAR RPAR SM

   82 stop: STOP SM

   83 sound: SOUND LPAR expr RPAR SM
   84      | SOUND LPAR RPAR SM

   85 mouth: MOUTH LPAR expr RPAR SM
   86      | MOUTH LPAR RPAR SM

   87 outputln: OUTPUTLN SM
   88         | OUTPUTLN outputlst SM

   89 outputlst: expr
   90          | outputlst CM expr


Terminals, with rules where they appear

$end (0) 0
error (256) 7 8 9
NAME (258) 14 15 37 44 45
INT_CONST (259) 46
DOUBLE_CONST (260) 47
STRING_CONST (261) 48
WHILE (262) 69
ENDWHILE (263) 9 68
IF (264) 55
ENDIF (265) 8 50 52 54
ELSE (266) 60
ELSEIF (267) 62
TYPE (268) 11
BREAK (269) 19
CONTINUE (270) 20
SM (271) 7 10 19 20 34 70 73 74 75 76 77 78 79 80 81 82 83 84 85 86
    87 88
CM (272) 13 72 74 90
LBR (273) 15 36 45
RBR (274) 15 36 45
LPAR (275) 49 55 62 67 69 74 80 81 83 84 85 86
RPAR (276) 49 55 62 67 69 74 80 81 83 84 85 86
ILLEGAL (277)
INPUT (278) 70
OUTPUT (279) 73
OUTPUTLN (280) 87 88
END (281) 2
RC (282) 74
SLEEP (283) 80 81
RIGHT (284) 77
LEFT (285) 78
BACK (286) 75
FORWARD (287) 76
DIMA (288) 79
STOP (289) 82
SOUND (290) 83 84
MOUTH (291) 85 86
ASG (292) 34
RELOP (293) 63
LOR (294) 64
LAND (295) 65
LNOT (296) 66
PLUS (297) 38
MINUS (298) 39 43
MUL (299) 40
DIV (300) 41
MOD (301) 42
UMINUS (302)


Nonterminals, with rules where they appear

$accept (48)
    on left: 0
program (49)
    on left: 1 2, on right: 0
stms (50)
    on left: 3 4, on right: 1 2 4 50 52 54 60 61 68
stm (51)
    on left: 5 6 7 8 9, on right: 3 4
decl (52)
    on left: 10, on right: 5
type (53)
    on left: 11, on right: 10
defs (54)
    on left: 12 13, on right: 10 13
def (55)
    on left: 14 15, on right: 12 13
oper (56)
    on left: 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33,
    on right: 6
assign (57)
    on left: 34, on right: 16
lval (58)
    on left: 35 36, on right: 34 71 72
lval_name (59)
    on left: 37, on right: 35 36
expr (60)
    on left: 38 39 40 41 42 43 44 45 46 47 48 49, on right: 15 34 36
    38 39 40 41 42 43 45 49 63 74 80 83 85 89 90
if (61)
    on left: 50 52 54, on right: 17
$@1 (62)
    on left: 51, on right: 52
$@2 (63)
    on left: 53, on right: 54
ifh (64)
    on left: 55, on right: 50 52 54
elseifs (65)
    on left: 56 57, on right: 54
elseiflist (66)
    on left: 58 59, on right: 56 57 59
else (67)
    on left: 60, on right: 52 57
elseif (68)
    on left: 61, on right: 58 59
elseifh (69)
    on left: 62, on right: 61
lexpr (70)
    on left: 63 64 65 66 67, on right: 55 62 64 65 66 67 69
while (71)
    on left: 68, on right: 18
whileh (72)
    on left: 69, on right: 68
input (73)
    on left: 70, on right: 21
inputlst (74)
    on left: 71 72, on right: 70 72
output (75)
    on left: 73, on right: 22
rc (76)
    on left: 74, on right: 24
back (77)
    on left: 75, on right: 26
forward (78)
    on left: 76, on right: 25
right (79)
    on left: 77, on right: 27
left (80)
    on left: 78, on right: 28
dima (81)
    on left: 79, on right: 30
sleep (82)
    on left: 80 81, on right: 29
stop (83)
    on left: 82, on right: 33
sound (84)
    on left: 83 84, on right: 31
mouth (85)
    on left: 85 86, on right: 32
outputln (86)
    on left: 87 88, on right: 23
outputlst (87)
    on left: 89 90, on right: 73 88 90


State 0

    0 $accept: . program $end

    error     shift, and go to state 1
    NAME      shift, and go to state 2
    WHILE     shift, and go to state 3
    IF        shift, and go to state 4
    TYPE      shift, and go to state 5
    BREAK     shift, and go to state 6
    CONTINUE  shift, and go to state 7
    INPUT     shift, and go to state 8
    OUTPUT    shift, and go to state 9
    OUTPUTLN  shift, and go to state 10
    RC        shift, and go to state 11
    SLEEP     shift, and go to state 12
    RIGHT     shift, and go to state 13
    LEFT      shift, and go to state 14
    BACK      shift, and go to state 15
    FORWARD   shift, and go to state 16
    DIMA      shift, and go to state 17
    STOP      shift, and go to state 18
    SOUND     shift, and go to state 19
    MOUTH     shift, and go to state 20

    program    go to state 21
    stms       go to state 22
    stm        go to state 23
    decl       go to state 24
    type       go to state 25
    oper       go to state 26
    assign     go to state 27
    lval       go to state 28
    lval_name  go to state 29
    if         go to state 30
    ifh        go to state 31
    while      go to state 32
    whileh     go to state 33
    input      go to state 34
    output     go to state 35
    rc         go to state 36
    back       go to state 37
    forward    go to state 38
    right      go to state 39
    left       go to state 40
    dima       go to state 41
    sleep      go to state 42
    stop       go to state 43
    sound      go to state 44
    mouth      go to state 45
    outputln   go to state 46


State 1

    7 stm: error . SM
    8    | error . ENDIF
    9    | error . ENDWHILE

    ENDWHILE  shift, and go to state 47
    ENDIF     shift, and go to state 48
    SM        shift, and go to state 49


State 2

   37 lval_name: NAME .

    $default  reduce using rule 37 (lval_name)


State 3

   69 whileh: WHILE . LPAR lexpr RPAR

    LPAR  shift, and go to state 50


State 4

   55 ifh: IF . LPAR lexpr RPAR

    LPAR  shift, and go to state 51


State 5

   11 type: TYPE .

    $default  reduce using rule 11 (type)


State 6

   19 oper: BREAK . SM

    SM  shift, and go to state 52


State 7

   20 oper: CONTINUE . SM

    SM  shift, and go to state 53


State 8

   70 input: INPUT . inputlst SM

    NAME  shift, and go to state 2

    lval       go to state 54
    lval_name  go to state 29
    inputlst   go to state 55


State 9

   73 output: OUTPUT . outputlst SM

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr       go to state 62
    outputlst  go to state 63


State 10

   87 outputln: OUTPUTLN . SM
   88         | OUTPUTLN . outputlst SM

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    SM            shift, and go to state 64
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr       go to state 62
    outputlst  go to state 65


State 11

   74 rc: RC . LPAR expr CM expr RPAR SM

    LPAR  shift, and go to state 66


State 12

   80 sleep: SLEEP . LPAR expr RPAR SM
   81      | SLEEP . LPAR RPAR SM

    LPAR  shift, and go to state 67


State 13

   77 right: RIGHT . SM

    SM  shift, and go to state 68


State 14

   78 left: LEFT . SM

    SM  shift, and go to state 69


State 15

   75 back: BACK . SM

    SM  shift, and go to state 70


State 16

   76 forward: FORWARD . SM

    SM  shift, and go to state 71


State 17

   79 dima: DIMA . SM

    SM  shift, and go to state 72


State 18

   82 stop: STOP . SM

    SM  shift, and go to state 73


State 19

   83 sound: SOUND . LPAR expr RPAR SM
   84      | SOUND . LPAR RPAR SM

    LPAR  shift, and go to state 74


State 20

   85 mouth: MOUTH . LPAR expr RPAR SM
   86      | MOUTH . LPAR RPAR SM

    LPAR  shift, and go to state 75


State 21

    0 $accept: program . $end

    $end  shift, and go to state 76


State 22

    1 program: stms .
    2        | stms . END
    4 stms: stms . stm

    error     shift, and go to state 1
    NAME      shift, and go to state 2
    WHILE     shift, and go to state 3
    IF        shift, and go to state 4
    TYPE      shift, and go to state 5
    BREAK     shift, and go to state 6
    CONTINUE  shift, and go to state 7
    INPUT     shift, and go to state 8
    OUTPUT    shift, and go to state 9
    OUTPUTLN  shift, and go to state 10
    END       shift, and go to state 77
    RC        shift, and go to state 11
    SLEEP     shift, and go to state 12
    RIGHT     shift, and go to state 13
    LEFT      shift, and go to state 14
    BACK      shift, and go to state 15
    FORWARD   shift, and go to state 16
    DIMA      shift, and go to state 17
    STOP      shift, and go to state 18
    SOUND     shift, and go to state 19
    MOUTH     shift, and go to state 20

    $end  reduce using rule 1 (program)

    stm        go to state 78
    decl       go to state 24
    type       go to state 25
    oper       go to state 26
    assign     go to state 27
    lval       go to state 28
    lval_name  go to state 29
    if         go to state 30
    ifh        go to state 31
    while      go to state 32
    whileh     go to state 33
    input      go to state 34
    output     go to state 35
    rc         go to state 36
    back       go to state 37
    forward    go to state 38
    right      go to state 39
    left       go to state 40
    dima       go to state 41
    sleep      go to state 42
    stop       go to state 43
    sound      go to state 44
    mouth      go to state 45
    outputln   go to state 46


State 23

    3 stms: stm .

    $default  reduce using rule 3 (stms)


State 24

    5 stm: decl .

    $default  reduce using rule 5 (stm)


State 25

   10 decl: type . defs SM

    NAME  shift, and go to state 79

    defs  go to state 80
    def   go to state 81


State 26

    6 stm: oper .

    $default  reduce using rule 6 (stm)


State 27

   16 oper: assign .

    $default  reduce using rule 16 (oper)


State 28

   34 assign: lval . ASG expr SM

    ASG  shift, and go to state 82


State 29

   35 lval: lval_name .
   36     | lval_name . LBR expr RBR

    LBR  shift, and go to state 83

    $default  reduce using rule 35 (lval)


State 30

   17 oper: if .

    $default  reduce using rule 17 (oper)


State 31

   50 if: ifh . stms ENDIF
   52   | ifh . stms $@1 else ENDIF
   54   | ifh . stms $@2 elseifs ENDIF

    error     shift, and go to state 1
    NAME      shift, and go to state 2
    WHILE     shift, and go to state 3
    IF        shift, and go to state 4
    TYPE      shift, and go to state 5
    BREAK     shift, and go to state 6
    CONTINUE  shift, and go to state 7
    INPUT     shift, and go to state 8
    OUTPUT    shift, and go to state 9
    OUTPUTLN  shift, and go to state 10
    RC        shift, and go to state 11
    SLEEP     shift, and go to state 12
    RIGHT     shift, and go to state 13
    LEFT      shift, and go to state 14
    BACK      shift, and go to state 15
    FORWARD   shift, and go to state 16
    DIMA      shift, and go to state 17
    STOP      shift, and go to state 18
    SOUND     shift, and go to state 19
    MOUTH     shift, and go to state 20

    stms       go to state 84
    stm        go to state 23
    decl       go to state 24
    type       go to state 25
    oper       go to state 26
    assign     go to state 27
    lval       go to state 28
    lval_name  go to state 29
    if         go to state 30
    ifh        go to state 31
    while      go to state 32
    whileh     go to state 33
    input      go to state 34
    output     go to state 35
    rc         go to state 36
    back       go to state 37
    forward    go to state 38
    right      go to state 39
    left       go to state 40
    dima       go to state 41
    sleep      go to state 42
    stop       go to state 43
    sound      go to state 44
    mouth      go to state 45
    outputln   go to state 46


State 32

   18 oper: while .

    $default  reduce using rule 18 (oper)


State 33

   68 while: whileh . stms ENDWHILE

    error     shift, and go to state 1
    NAME      shift, and go to state 2
    WHILE     shift, and go to state 3
    IF        shift, and go to state 4
    TYPE      shift, and go to state 5
    BREAK     shift, and go to state 6
    CONTINUE  shift, and go to state 7
    INPUT     shift, and go to state 8
    OUTPUT    shift, and go to state 9
    OUTPUTLN  shift, and go to state 10
    RC        shift, and go to state 11
    SLEEP     shift, and go to state 12
    RIGHT     shift, and go to state 13
    LEFT      shift, and go to state 14
    BACK      shift, and go to state 15
    FORWARD   shift, and go to state 16
    DIMA      shift, and go to state 17
    STOP      shift, and go to state 18
    SOUND     shift, and go to state 19
    MOUTH     shift, and go to state 20

    stms       go to state 85
    stm        go to state 23
    decl       go to state 24
    type       go to state 25
    oper       go to state 26
    assign     go to state 27
    lval       go to state 28
    lval_name  go to state 29
    if         go to state 30
    ifh        go to state 31
    while      go to state 32
    whileh     go to state 33
    input      go to state 34
    output     go to state 35
    rc         go to state 36
    back       go to state 37
    forward    go to state 38
    right      go to state 39
    left       go to state 40
    dima       go to state 41
    sleep      go to state 42
    stop       go to state 43
    sound      go to state 44
    mouth      go to state 45
    outputln   go to state 46


State 34

   21 oper: input .

    $default  reduce using rule 21 (oper)


State 35

   22 oper: output .

    $default  reduce using rule 22 (oper)


State 36

   24 oper: rc .

    $default  reduce using rule 24 (oper)


State 37

   26 oper: back .

    $default  reduce using rule 26 (oper)


State 38

   25 oper: forward .

    $default  reduce using rule 25 (oper)


State 39

   27 oper: right .

    $default  reduce using rule 27 (oper)


State 40

   28 oper: left .

    $default  reduce using rule 28 (oper)


State 41

   30 oper: dima .

    $default  reduce using rule 30 (oper)


State 42

   29 oper: sleep .

    $default  reduce using rule 29 (oper)


State 43

   33 oper: stop .

    $default  reduce using rule 33 (oper)


State 44

   31 oper: sound .

    $default  reduce using rule 31 (oper)


State 45

   32 oper: mouth .

    $default  reduce using rule 32 (oper)


State 46

   23 oper: outputln .

    $default  reduce using rule 23 (oper)


State 47

    9 stm: error ENDWHILE .

    $default  reduce using rule 9 (stm)


State 48

    8 stm: error ENDIF .

    $default  reduce using rule 8 (stm)


State 49

    7 stm: error SM .

    $default  reduce using rule 7 (stm)


State 50

   69 whileh: WHILE LPAR . lexpr RPAR

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 86
    LNOT          shift, and go to state 87
    MINUS         shift, and go to state 61

    expr   go to state 88
    lexpr  go to state 89


State 51

   55 ifh: IF LPAR . lexpr RPAR

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 86
    LNOT          shift, and go to state 87
    MINUS         shift, and go to state 61

    expr   go to state 88
    lexpr  go to state 90


State 52

   19 oper: BREAK SM .

    $default  reduce using rule 19 (oper)


State 53

   20 oper: CONTINUE SM .

    $default  reduce using rule 20 (oper)


State 54

   71 inputlst: lval .

    $default  reduce using rule 71 (inputlst)


State 55

   70 input: INPUT inputlst . SM
   72 inputlst: inputlst . CM lval

    SM  shift, and go to state 91
    CM  shift, and go to state 92


State 56

   44 expr: NAME .
   45     | NAME . LBR expr RBR

    LBR  shift, and go to state 93

    $default  reduce using rule 44 (expr)


State 57

   46 expr: INT_CONST .

    $default  reduce using rule 46 (expr)


State 58

   47 expr: DOUBLE_CONST .

    $default  reduce using rule 47 (expr)


State 59

   48 expr: STRING_CONST .

    $default  reduce using rule 48 (expr)


State 60

   49 expr: LPAR . expr RPAR

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 94


State 61

   43 expr: MINUS . expr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 95


State 62

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   89 outputlst: expr .

    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100

    $default  reduce using rule 89 (outputlst)


State 63

   73 output: OUTPUT outputlst . SM
   90 outputlst: outputlst . CM expr

    SM  shift, and go to state 101
    CM  shift, and go to state 102


State 64

   87 outputln: OUTPUTLN SM .

    $default  reduce using rule 87 (outputln)


State 65

   88 outputln: OUTPUTLN outputlst . SM
   90 outputlst: outputlst . CM expr

    SM  shift, and go to state 103
    CM  shift, and go to state 102


State 66

   74 rc: RC LPAR . expr CM expr RPAR SM

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 104


State 67

   80 sleep: SLEEP LPAR . expr RPAR SM
   81      | SLEEP LPAR . RPAR SM

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    RPAR          shift, and go to state 105
    MINUS         shift, and go to state 61

    expr  go to state 106


State 68

   77 right: RIGHT SM .

    $default  reduce using rule 77 (right)


State 69

   78 left: LEFT SM .

    $default  reduce using rule 78 (left)


State 70

   75 back: BACK SM .

    $default  reduce using rule 75 (back)


State 71

   76 forward: FORWARD SM .

    $default  reduce using rule 76 (forward)


State 72

   79 dima: DIMA SM .

    $default  reduce using rule 79 (dima)


State 73

   82 stop: STOP SM .

    $default  reduce using rule 82 (stop)


State 74

   83 sound: SOUND LPAR . expr RPAR SM
   84      | SOUND LPAR . RPAR SM

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    RPAR          shift, and go to state 107
    MINUS         shift, and go to state 61

    expr  go to state 108


State 75

   85 mouth: MOUTH LPAR . expr RPAR SM
   86      | MOUTH LPAR . RPAR SM

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    RPAR          shift, and go to state 109
    MINUS         shift, and go to state 61

    expr  go to state 110


State 76

    0 $accept: program $end .

    $default  accept


State 77

    2 program: stms END .

    $default  reduce using rule 2 (program)


State 78

    4 stms: stms stm .

    $default  reduce using rule 4 (stms)


State 79

   14 def: NAME .
   15    | NAME . LBR expr RBR

    LBR  shift, and go to state 111

    $default  reduce using rule 14 (def)


State 80

   10 decl: type defs . SM
   13 defs: defs . CM def

    SM  shift, and go to state 112
    CM  shift, and go to state 113


State 81

   12 defs: def .

    $default  reduce using rule 12 (defs)


State 82

   34 assign: lval ASG . expr SM

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 114


State 83

   36 lval: lval_name LBR . expr RBR

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 115


State 84

    4 stms: stms . stm
   50 if: ifh stms . ENDIF
   52   | ifh stms . $@1 else ENDIF
   54   | ifh stms . $@2 elseifs ENDIF

    error     shift, and go to state 1
    NAME      shift, and go to state 2
    WHILE     shift, and go to state 3
    IF        shift, and go to state 4
    ENDIF     shift, and go to state 116
    TYPE      shift, and go to state 5
    BREAK     shift, and go to state 6
    CONTINUE  shift, and go to state 7
    INPUT     shift, and go to state 8
    OUTPUT    shift, and go to state 9
    OUTPUTLN  shift, and go to state 10
    RC        shift, and go to state 11
    SLEEP     shift, and go to state 12
    RIGHT     shift, and go to state 13
    LEFT      shift, and go to state 14
    BACK      shift, and go to state 15
    FORWARD   shift, and go to state 16
    DIMA      shift, and go to state 17
    STOP      shift, and go to state 18
    SOUND     shift, and go to state 19
    MOUTH     shift, and go to state 20

    ELSE    reduce using rule 51 ($@1)
    ELSEIF  reduce using rule 53 ($@2)

    stm        go to state 78
    decl       go to state 24
    type       go to state 25
    oper       go to state 26
    assign     go to state 27
    lval       go to state 28
    lval_name  go to state 29
    if         go to state 30
    $@1        go to state 117
    $@2        go to state 118
    ifh        go to state 31
    while      go to state 32
    whileh     go to state 33
    input      go to state 34
    output     go to state 35
    rc         go to state 36
    back       go to state 37
    forward    go to state 38
    right      go to state 39
    left       go to state 40
    dima       go to state 41
    sleep      go to state 42
    stop       go to state 43
    sound      go to state 44
    mouth      go to state 45
    outputln   go to state 46


State 85

    4 stms: stms . stm
   68 while: whileh stms . ENDWHILE

    error     shift, and go to state 1
    NAME      shift, and go to state 2
    WHILE     shift, and go to state 3
    ENDWHILE  shift, and go to state 119
    IF        shift, and go to state 4
    TYPE      shift, and go to state 5
    BREAK     shift, and go to state 6
    CONTINUE  shift, and go to state 7
    INPUT     shift, and go to state 8
    OUTPUT    shift, and go to state 9
    OUTPUTLN  shift, and go to state 10
    RC        shift, and go to state 11
    SLEEP     shift, and go to state 12
    RIGHT     shift, and go to state 13
    LEFT      shift, and go to state 14
    BACK      shift, and go to state 15
    FORWARD   shift, and go to state 16
    DIMA      shift, and go to state 17
    STOP      shift, and go to state 18
    SOUND     shift, and go to state 19
    MOUTH     shift, and go to state 20

    stm        go to state 78
    decl       go to state 24
    type       go to state 25
    oper       go to state 26
    assign     go to state 27
    lval       go to state 28
    lval_name  go to state 29
    if         go to state 30
    ifh        go to state 31
    while      go to state 32
    whileh     go to state 33
    input      go to state 34
    output     go to state 35
    rc         go to state 36
    back       go to state 37
    forward    go to state 38
    right      go to state 39
    left       go to state 40
    dima       go to state 41
    sleep      go to state 42
    stop       go to state 43
    sound      go to state 44
    mouth      go to state 45
    outputln   go to state 46


State 86

   49 expr: LPAR . expr RPAR
   67 lexpr: LPAR . lexpr RPAR

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 86
    LNOT          shift, and go to state 87
    MINUS         shift, and go to state 61

    expr   go to state 120
    lexpr  go to state 121


State 87

   66 lexpr: LNOT . lexpr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 86
    LNOT          shift, and go to state 87
    MINUS         shift, and go to state 61

    expr   go to state 88
    lexpr  go to state 122


State 88

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   63 lexpr: expr . RELOP expr

    RELOP  shift, and go to state 123
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 89

   64 lexpr: lexpr . LOR lexpr
   65      | lexpr . LAND lexpr
   69 whileh: WHILE LPAR lexpr . RPAR

    RPAR  shift, and go to state 124
    LOR   shift, and go to state 125
    LAND  shift, and go to state 126


State 90

   55 ifh: IF LPAR lexpr . RPAR
   64 lexpr: lexpr . LOR lexpr
   65      | lexpr . LAND lexpr

    RPAR  shift, and go to state 127
    LOR   shift, and go to state 125
    LAND  shift, and go to state 126


State 91

   70 input: INPUT inputlst SM .

    $default  reduce using rule 70 (input)


State 92

   72 inputlst: inputlst CM . lval

    NAME  shift, and go to state 2

    lval       go to state 128
    lval_name  go to state 29


State 93

   45 expr: NAME LBR . expr RBR

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 129


State 94

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   49     | LPAR expr . RPAR

    RPAR   shift, and go to state 130
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 95

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   43     | MINUS expr .

    $default  reduce using rule 43 (expr)


State 96

   38 expr: expr PLUS . expr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 131


State 97

   39 expr: expr MINUS . expr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 132


State 98

   40 expr: expr MUL . expr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 133


State 99

   41 expr: expr DIV . expr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 134


State 100

   42 expr: expr MOD . expr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 135


State 101

   73 output: OUTPUT outputlst SM .

    $default  reduce using rule 73 (output)


State 102

   90 outputlst: outputlst CM . expr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 136


State 103

   88 outputln: OUTPUTLN outputlst SM .

    $default  reduce using rule 88 (outputln)


State 104

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   74 rc: RC LPAR expr . CM expr RPAR SM

    CM     shift, and go to state 137
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 105

   81 sleep: SLEEP LPAR RPAR . SM

    SM  shift, and go to state 138


State 106

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   80 sleep: SLEEP LPAR expr . RPAR SM

    RPAR   shift, and go to state 139
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 107

   84 sound: SOUND LPAR RPAR . SM

    SM  shift, and go to state 140


State 108

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   83 sound: SOUND LPAR expr . RPAR SM

    RPAR   shift, and go to state 141
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 109

   86 mouth: MOUTH LPAR RPAR . SM

    SM  shift, and go to state 142


State 110

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   85 mouth: MOUTH LPAR expr . RPAR SM

    RPAR   shift, and go to state 143
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 111

   15 def: NAME LBR . expr RBR

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 144


State 112

   10 decl: type defs SM .

    $default  reduce using rule 10 (decl)


State 113

   13 defs: defs CM . def

    NAME  shift, and go to state 79

    def  go to state 145


State 114

   34 assign: lval ASG expr . SM
   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr

    SM     shift, and go to state 146
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 115

   36 lval: lval_name LBR expr . RBR
   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr

    RBR    shift, and go to state 147
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 116

   50 if: ifh stms ENDIF .

    $default  reduce using rule 50 (if)


State 117

   52 if: ifh stms $@1 . else ENDIF

    ELSE  shift, and go to state 148

    else  go to state 149


State 118

   54 if: ifh stms $@2 . elseifs ENDIF

    ELSEIF  shift, and go to state 150

    elseifs     go to state 151
    elseiflist  go to state 152
    elseif      go to state 153
    elseifh     go to state 154


State 119

   68 while: whileh stms ENDWHILE .

    $default  reduce using rule 68 (while)


State 120

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   49     | LPAR expr . RPAR
   63 lexpr: expr . RELOP expr

    RPAR   shift, and go to state 130
    RELOP  shift, and go to state 123
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 121

   64 lexpr: lexpr . LOR lexpr
   65      | lexpr . LAND lexpr
   67      | LPAR lexpr . RPAR

    RPAR  shift, and go to state 155
    LOR   shift, and go to state 125
    LAND  shift, and go to state 126


State 122

   64 lexpr: lexpr . LOR lexpr
   65      | lexpr . LAND lexpr
   66      | LNOT lexpr .

    $default  reduce using rule 66 (lexpr)


State 123

   63 lexpr: expr RELOP . expr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 156


State 124

   69 whileh: WHILE LPAR lexpr RPAR .

    $default  reduce using rule 69 (whileh)


State 125

   64 lexpr: lexpr LOR . lexpr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 86
    LNOT          shift, and go to state 87
    MINUS         shift, and go to state 61

    expr   go to state 88
    lexpr  go to state 157


State 126

   65 lexpr: lexpr LAND . lexpr

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 86
    LNOT          shift, and go to state 87
    MINUS         shift, and go to state 61

    expr   go to state 88
    lexpr  go to state 158


State 127

   55 ifh: IF LPAR lexpr RPAR .

    $default  reduce using rule 55 (ifh)


State 128

   72 inputlst: inputlst CM lval .

    $default  reduce using rule 72 (inputlst)


State 129

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   45     | NAME LBR expr . RBR

    RBR    shift, and go to state 159
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 130

   49 expr: LPAR expr RPAR .

    $default  reduce using rule 49 (expr)


State 131

   38 expr: expr . PLUS expr
   38     | expr PLUS expr .
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr

    MUL  shift, and go to state 98
    DIV  shift, and go to state 99
    MOD  shift, and go to state 100

    $default  reduce using rule 38 (expr)


State 132

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   39     | expr MINUS expr .
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr

    MUL  shift, and go to state 98
    DIV  shift, and go to state 99
    MOD  shift, and go to state 100

    $default  reduce using rule 39 (expr)


State 133

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   40     | expr MUL expr .
   41     | expr . DIV expr
   42     | expr . MOD expr

    $default  reduce using rule 40 (expr)


State 134

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   41     | expr DIV expr .
   42     | expr . MOD expr

    $default  reduce using rule 41 (expr)


State 135

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   42     | expr MOD expr .

    $default  reduce using rule 42 (expr)


State 136

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   90 outputlst: outputlst CM expr .

    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100

    $default  reduce using rule 90 (outputlst)


State 137

   74 rc: RC LPAR expr CM . expr RPAR SM

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 60
    MINUS         shift, and go to state 61

    expr  go to state 160


State 138

   81 sleep: SLEEP LPAR RPAR SM .

    $default  reduce using rule 81 (sleep)


State 139

   80 sleep: SLEEP LPAR expr RPAR . SM

    SM  shift, and go to state 161


State 140

   84 sound: SOUND LPAR RPAR SM .

    $default  reduce using rule 84 (sound)


State 141

   83 sound: SOUND LPAR expr RPAR . SM

    SM  shift, and go to state 162


State 142

   86 mouth: MOUTH LPAR RPAR SM .

    $default  reduce using rule 86 (mouth)


State 143

   85 mouth: MOUTH LPAR expr RPAR . SM

    SM  shift, and go to state 163


State 144

   15 def: NAME LBR expr . RBR
   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr

    RBR    shift, and go to state 164
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 145

   13 defs: defs CM def .

    $default  reduce using rule 13 (defs)


State 146

   34 assign: lval ASG expr SM .

    $default  reduce using rule 34 (assign)


State 147

   36 lval: lval_name LBR expr RBR .

    $default  reduce using rule 36 (lval)


State 148

   60 else: ELSE . stms

    error     shift, and go to state 1
    NAME      shift, and go to state 2
    WHILE     shift, and go to state 3
    IF        shift, and go to state 4
    TYPE      shift, and go to state 5
    BREAK     shift, and go to state 6
    CONTINUE  shift, and go to state 7
    INPUT     shift, and go to state 8
    OUTPUT    shift, and go to state 9
    OUTPUTLN  shift, and go to state 10
    RC        shift, and go to state 11
    SLEEP     shift, and go to state 12
    RIGHT     shift, and go to state 13
    LEFT      shift, and go to state 14
    BACK      shift, and go to state 15
    FORWARD   shift, and go to state 16
    DIMA      shift, and go to state 17
    STOP      shift, and go to state 18
    SOUND     shift, and go to state 19
    MOUTH     shift, and go to state 20

    stms       go to state 165
    stm        go to state 23
    decl       go to state 24
    type       go to state 25
    oper       go to state 26
    assign     go to state 27
    lval       go to state 28
    lval_name  go to state 29
    if         go to state 30
    ifh        go to state 31
    while      go to state 32
    whileh     go to state 33
    input      go to state 34
    output     go to state 35
    rc         go to state 36
    back       go to state 37
    forward    go to state 38
    right      go to state 39
    left       go to state 40
    dima       go to state 41
    sleep      go to state 42
    stop       go to state 43
    sound      go to state 44
    mouth      go to state 45
    outputln   go to state 46


State 149

   52 if: ifh stms $@1 else . ENDIF

    ENDIF  shift, and go to state 166


State 150

   62 elseifh: ELSEIF . LPAR lexpr RPAR

    LPAR  shift, and go to state 167


State 151

   54 if: ifh stms $@2 elseifs . ENDIF

    ENDIF  shift, and go to state 168


State 152

   56 elseifs: elseiflist .
   57        | elseiflist . else
   59 elseiflist: elseiflist . elseif

    ELSE    shift, and go to state 148
    ELSEIF  shift, and go to state 150

    $default  reduce using rule 56 (elseifs)

    else     go to state 169
    elseif   go to state 170
    elseifh  go to state 154


State 153

   58 elseiflist: elseif .

    $default  reduce using rule 58 (elseiflist)


State 154

   61 elseif: elseifh . stms

    error     shift, and go to state 1
    NAME      shift, and go to state 2
    WHILE     shift, and go to state 3
    IF        shift, and go to state 4
    TYPE      shift, and go to state 5
    BREAK     shift, and go to state 6
    CONTINUE  shift, and go to state 7
    INPUT     shift, and go to state 8
    OUTPUT    shift, and go to state 9
    OUTPUTLN  shift, and go to state 10
    RC        shift, and go to state 11
    SLEEP     shift, and go to state 12
    RIGHT     shift, and go to state 13
    LEFT      shift, and go to state 14
    BACK      shift, and go to state 15
    FORWARD   shift, and go to state 16
    DIMA      shift, and go to state 17
    STOP      shift, and go to state 18
    SOUND     shift, and go to state 19
    MOUTH     shift, and go to state 20

    stms       go to state 171
    stm        go to state 23
    decl       go to state 24
    type       go to state 25
    oper       go to state 26
    assign     go to state 27
    lval       go to state 28
    lval_name  go to state 29
    if         go to state 30
    ifh        go to state 31
    while      go to state 32
    whileh     go to state 33
    input      go to state 34
    output     go to state 35
    rc         go to state 36
    back       go to state 37
    forward    go to state 38
    right      go to state 39
    left       go to state 40
    dima       go to state 41
    sleep      go to state 42
    stop       go to state 43
    sound      go to state 44
    mouth      go to state 45
    outputln   go to state 46


State 155

   67 lexpr: LPAR lexpr RPAR .

    $default  reduce using rule 67 (lexpr)


State 156

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   63 lexpr: expr RELOP expr .

    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100

    $default  reduce using rule 63 (lexpr)


State 157

   64 lexpr: lexpr . LOR lexpr
   64      | lexpr LOR lexpr .
   65      | lexpr . LAND lexpr

    LAND  shift, and go to state 126

    $default  reduce using rule 64 (lexpr)


State 158

   64 lexpr: lexpr . LOR lexpr
   65      | lexpr . LAND lexpr
   65      | lexpr LAND lexpr .

    $default  reduce using rule 65 (lexpr)


State 159

   45 expr: NAME LBR expr RBR .

    $default  reduce using rule 45 (expr)


State 160

   38 expr: expr . PLUS expr
   39     | expr . MINUS expr
   40     | expr . MUL expr
   41     | expr . DIV expr
   42     | expr . MOD expr
   74 rc: RC LPAR expr CM expr . RPAR SM

    RPAR   shift, and go to state 172
    PLUS   shift, and go to state 96
    MINUS  shift, and go to state 97
    MUL    shift, and go to state 98
    DIV    shift, and go to state 99
    MOD    shift, and go to state 100


State 161

   80 sleep: SLEEP LPAR expr RPAR SM .

    $default  reduce using rule 80 (sleep)


State 162

   83 sound: SOUND LPAR expr RPAR SM .

    $default  reduce using rule 83 (sound)


State 163

   85 mouth: MOUTH LPAR expr RPAR SM .

    $default  reduce using rule 85 (mouth)


State 164

   15 def: NAME LBR expr RBR .

    $default  reduce using rule 15 (def)


State 165

    4 stms: stms . stm
   60 else: ELSE stms .

    error     shift, and go to state 1
    NAME      shift, and go to state 2
    WHILE     shift, and go to state 3
    IF        shift, and go to state 4
    TYPE      shift, and go to state 5
    BREAK     shift, and go to state 6
    CONTINUE  shift, and go to state 7
    INPUT     shift, and go to state 8
    OUTPUT    shift, and go to state 9
    OUTPUTLN  shift, and go to state 10
    RC        shift, and go to state 11
    SLEEP     shift, and go to state 12
    RIGHT     shift, and go to state 13
    LEFT      shift, and go to state 14
    BACK      shift, and go to state 15
    FORWARD   shift, and go to state 16
    DIMA      shift, and go to state 17
    STOP      shift, and go to state 18
    SOUND     shift, and go to state 19
    MOUTH     shift, and go to state 20

    ENDIF  reduce using rule 60 (else)

    stm        go to state 78
    decl       go to state 24
    type       go to state 25
    oper       go to state 26
    assign     go to state 27
    lval       go to state 28
    lval_name  go to state 29
    if         go to state 30
    ifh        go to state 31
    while      go to state 32
    whileh     go to state 33
    input      go to state 34
    output     go to state 35
    rc         go to state 36
    back       go to state 37
    forward    go to state 38
    right      go to state 39
    left       go to state 40
    dima       go to state 41
    sleep      go to state 42
    stop       go to state 43
    sound      go to state 44
    mouth      go to state 45
    outputln   go to state 46


State 166

   52 if: ifh stms $@1 else ENDIF .

    $default  reduce using rule 52 (if)


State 167

   62 elseifh: ELSEIF LPAR . lexpr RPAR

    NAME          shift, and go to state 56
    INT_CONST     shift, and go to state 57
    DOUBLE_CONST  shift, and go to state 58
    STRING_CONST  shift, and go to state 59
    LPAR          shift, and go to state 86
    LNOT          shift, and go to state 87
    MINUS         shift, and go to state 61

    expr   go to state 88
    lexpr  go to state 173


State 168

   54 if: ifh stms $@2 elseifs ENDIF .

    $default  reduce using rule 54 (if)


State 169

   57 elseifs: elseiflist else .

    $default  reduce using rule 57 (elseifs)


State 170

   59 elseiflist: elseiflist elseif .

    $default  reduce using rule 59 (elseiflist)


State 171

    4 stms: stms . stm
   61 elseif: elseifh stms .

    error     shift, and go to state 1
    NAME      shift, and go to state 2
    WHILE     shift, and go to state 3
    IF        shift, and go to state 4
    TYPE      shift, and go to state 5
    BREAK     shift, and go to state 6
    CONTINUE  shift, and go to state 7
    INPUT     shift, and go to state 8
    OUTPUT    shift, and go to state 9
    OUTPUTLN  shift, and go to state 10
    RC        shift, and go to state 11
    SLEEP     shift, and go to state 12
    RIGHT     shift, and go to state 13
    LEFT      shift, and go to state 14
    BACK      shift, and go to state 15
    FORWARD   shift, and go to state 16
    DIMA      shift, and go to state 17
    STOP      shift, and go to state 18
    SOUND     shift, and go to state 19
    MOUTH     shift, and go to state 20

    ENDIF   reduce using rule 61 (elseif)
    ELSE    reduce using rule 61 (elseif)
    ELSEIF  reduce using rule 61 (elseif)

    stm        go to state 78
    decl       go to state 24
    type       go to state 25
    oper       go to state 26
    assign     go to state 27
    lval       go to state 28
    lval_name  go to state 29
    if         go to state 30
    ifh        go to state 31
    while      go to state 32
    whileh     go to state 33
    input      go to state 34
    output     go to state 35
    rc         go to state 36
    back       go to state 37
    forward    go to state 38
    right      go to state 39
    left       go to state 40
    dima       go to state 41
    sleep      go to state 42
    stop       go to state 43
    sound      go to state 44
    mouth      go to state 45
    outputln   go to state 46


State 172

   74 rc: RC LPAR expr CM expr RPAR . SM

    SM  shift, and go to state 174


State 173

   62 elseifh: ELSEIF LPAR lexpr . RPAR
   64 lexpr: lexpr . LOR lexpr
   65      | lexpr . LAND lexpr

    RPAR  shift, and go to state 175
    LOR   shift, and go to state 125
    LAND  shift, and go to state 126


State 174

   74 rc: RC LPAR expr CM expr RPAR SM .

    $default  reduce using rule 74 (rc)


State 175

   62 elseifh: ELSEIF LPAR lexpr RPAR .

    $default  reduce using rule 62 (elseifh)
